/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { LinkedNFT, LinkedNFTArgs, getLinkedNFTSerializer } from '../types';

export type NftPool = Account<NftPoolAccountData>;

export type NftPoolAccountData = {
  discriminator: Array<number>;
  tokenMint: PublicKey;
  itemCount: bigint;
  maxLimited: boolean;
  unlinkable: boolean;
  items: Array<LinkedNFT>;
};

export type NftPoolAccountDataArgs = {
  tokenMint: PublicKey;
  itemCount: number | bigint;
  maxLimited: boolean;
  unlinkable: boolean;
  items: Array<LinkedNFTArgs>;
};

export function getNftPoolAccountDataSerializer(): Serializer<
  NftPoolAccountDataArgs,
  NftPoolAccountData
> {
  return mapSerializer<NftPoolAccountDataArgs, any, NftPoolAccountData>(
    struct<NftPoolAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['tokenMint', publicKeySerializer()],
        ['itemCount', u64()],
        ['maxLimited', bool()],
        ['unlinkable', bool()],
        ['items', array(getLinkedNFTSerializer())],
      ],
      { description: 'NftPoolAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [64, 127, 161, 167, 15, 15, 152, 86],
    })
  ) as Serializer<NftPoolAccountDataArgs, NftPoolAccountData>;
}

export function deserializeNftPool(rawAccount: RpcAccount): NftPool {
  return deserializeAccount(rawAccount, getNftPoolAccountDataSerializer());
}

export async function fetchNftPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftPool> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'NftPool');
  return deserializeNftPool(maybeAccount);
}

export async function safeFetchNftPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftPool | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeNftPool(maybeAccount) : null;
}

export async function fetchAllNftPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'NftPool');
    return deserializeNftPool(maybeAccount);
  });
}

export async function safeFetchAllNftPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeNftPool(maybeAccount as RpcAccount));
}

export function getNftPoolGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'e7lSProtocol',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      tokenMint: PublicKey;
      itemCount: number | bigint;
      maxLimited: boolean;
      unlinkable: boolean;
      items: Array<LinkedNFTArgs>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      tokenMint: [8, publicKeySerializer()],
      itemCount: [40, u64()],
      maxLimited: [48, bool()],
      unlinkable: [49, bool()],
      items: [50, array(getLinkedNFTSerializer())],
    })
    .deserializeUsing<NftPool>((account) => deserializeNftPool(account))
    .whereField('discriminator', [64, 127, 161, 167, 15, 15, 152, 86]);
}

export function findNftPoolPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The Mint address of the NFT */
    mint: PublicKey;
    /** The Config address of the admin PDA */
    config: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'e7lSProtocol',
    'MyProgram1111111111111111111111111111111111'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('nft-pool'),
    publicKeySerializer().serialize(seeds.mint),
    publicKeySerializer().serialize(seeds.config),
  ]);
}

export async function fetchNftPoolFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findNftPoolPda>[1],
  options?: RpcGetAccountOptions
): Promise<NftPool> {
  return fetchNftPool(context, findNftPoolPda(context, seeds), options);
}

export async function safeFetchNftPoolFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findNftPoolPda>[1],
  options?: RpcGetAccountOptions
): Promise<NftPool | null> {
  return safeFetchNftPool(context, findNftPoolPda(context, seeds), options);
}
