/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type GlobalPool = Account<GlobalPoolAccountData>;

export type GlobalPoolAccountData = {
  discriminator: Array<number>;
  admin: PublicKey;
};

export type GlobalPoolAccountDataArgs = { admin: PublicKey };

export function getGlobalPoolAccountDataSerializer(): Serializer<
  GlobalPoolAccountDataArgs,
  GlobalPoolAccountData
> {
  return mapSerializer<GlobalPoolAccountDataArgs, any, GlobalPoolAccountData>(
    struct<GlobalPoolAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['admin', publicKeySerializer()],
      ],
      { description: 'GlobalPoolAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [162, 244, 124, 37, 148, 94, 28, 50],
    })
  ) as Serializer<GlobalPoolAccountDataArgs, GlobalPoolAccountData>;
}

export function deserializeGlobalPool(rawAccount: RpcAccount): GlobalPool {
  return deserializeAccount(rawAccount, getGlobalPoolAccountDataSerializer());
}

export async function fetchGlobalPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalPool> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GlobalPool');
  return deserializeGlobalPool(maybeAccount);
}

export async function safeFetchGlobalPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalPool | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGlobalPool(maybeAccount) : null;
}

export async function fetchAllGlobalPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GlobalPool');
    return deserializeGlobalPool(maybeAccount);
  });
}

export async function safeFetchAllGlobalPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGlobalPool(maybeAccount as RpcAccount));
}

export function getGlobalPoolGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'e7lSProtocol',
    'MyProgram1111111111111111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ discriminator: Array<number>; admin: PublicKey }>({
      discriminator: [0, array(u8(), { size: 8 })],
      admin: [8, publicKeySerializer()],
    })
    .deserializeUsing<GlobalPool>((account) => deserializeGlobalPool(account))
    .whereField('discriminator', [162, 244, 124, 37, 148, 94, 28, 50]);
}

export function getGlobalPoolSize(): number {
  return 40;
}

export function findGlobalPoolPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The wallet address of the authority */
    authorityWallet: PublicKey;
    /** The identifier number of the pool */
    identifier: number | bigint;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'e7lSProtocol',
    'MyProgram1111111111111111111111111111111111'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('global-authority'),
    publicKeySerializer().serialize(seeds.authorityWallet),
    u64().serialize(seeds.identifier),
  ]);
}

export async function fetchGlobalPoolFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGlobalPoolPda>[1],
  options?: RpcGetAccountOptions
): Promise<GlobalPool> {
  return fetchGlobalPool(context, findGlobalPoolPda(context, seeds), options);
}

export async function safeFetchGlobalPoolFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGlobalPoolPda>[1],
  options?: RpcGetAccountOptions
): Promise<GlobalPool | null> {
  return safeFetchGlobalPool(
    context,
    findGlobalPoolPda(context, seeds),
    options
  );
}
